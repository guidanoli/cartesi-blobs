"Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain"
type Proof {
    firstIndex: Int!

    """
    Reads a single `Input` that is related to this `Proof`.
    """
    inputByInputIndex: Input
    inputIndex: Int!
    lastInput: Int!

    """
    A globally unique identifier. Can be used in various places throughout the system to identify this single value.
    """
    nodeId: ID!

    outputIndex: Int!
    validityInputIndexWithinEpoch: Int!
    validityMachineStateHash: String!
    validityOutputEpochRootHash: String!
    validityOutputHashInOutputHashesSiblings: [String]!
    validityOutputHashesInEpochSiblings: [String]!
    validityOutputHashesRootHash: String!
    validityOutputIndexWithinInput: Int!
}

enum CompletionStatus {
    UNPROCESSED
    ACCEPTED
    REJECTED
    EXCEPTION
    MACHINE_HALTED
    CYCLE_LIMIT_EXCEEDED
    TIME_LIMIT_EXCEEDED
    PAYLOAD_LENGTH_LIMIT_EXCEEDED
}

"Request submitted to the application to advance its state"
type Input {
    "Input index starting from genesis"
    index: Int!
    "Status of the input"
    status: CompletionStatus!
    "Address responsible for submitting the input"
    msgSender: String!
    "Timestamp associated with the input submission, as defined by the base layer's block in which it was recorded"
    timestamp: BigInt!
    "Number of the base layer block in which the input was recorded"
    blockNumber: BigInt!
    "Input payload in Ethereum hex binary format, starting with '0x'"
    payload: String!
    "Get a voucher from this particular input given the voucher's index"
    voucher(index: Int!): Voucher!
    "Get a notice from this particular input given the notice's index"
    notice(index: Int!): Notice!
    "Get a report from this particular input given the report's index"
    report(index: Int!): Report!
    "Get vouchers from this particular input with support for pagination"
    vouchers(
        first: Int
        last: Int
        after: String
        before: String
    ): VoucherConnection!
    "Get notices from this particular input with support for pagination"
    notices(
        first: Int
        last: Int
        after: String
        before: String
    ): NoticeConnection!
    "Get reports from this particular input with support for pagination"
    reports(
        first: Int
        last: Int
        after: String
        before: String
    ): ReportConnection!
}

"Representation of a transaction that can be carried out on the base layer blockchain, such as a transfer of assets"
type Voucher {
    "Voucher index within the context of the input that produced it"
    index: Int!
    "Input whose processing produced the voucher"
    input: Input!
    "Transaction destination address in Ethereum hex binary format (20 bytes), starting with '0x'"
    destination: String!
    "Transaction payload in Ethereum hex binary format, starting with '0x'"
    payload: String!
    "Proof object that allows this voucher to be validated and executed on the base layer blockchain"
    proof: Proof
}

"Top level queries"
type Query {
    "Get input based on its identifier"
    input(index: Int!): Input!
    "Get a voucher based on its index"
    voucher(voucherIndex: Int!, inputIndex: Int!): Voucher!
    "Get a notice based on its index"
    notice(noticeIndex: Int!, inputIndex: Int!): Notice!
    "Get a report based on its index"
    report(reportIndex: Int!, inputIndex: Int!): Report!
    "Get inputs with support for pagination"
    inputs(
        first: Int
        last: Int
        after: String
        before: String
        where: InputFilter
    ): InputConnection!
    "Get vouchers with support for pagination"
    vouchers(
        first: Int
        last: Int
        after: String
        before: String
    ): VoucherConnection!
    "Get notices with support for pagination"
    notices(
        first: Int
        last: Int
        after: String
        before: String
    ): NoticeConnection!
    "Get reports with support for pagination"
    reports(
        first: Int
        last: Int
        after: String
        before: String
    ): ReportConnection!
    "Get a convenient voucher based on its index or filter"
    convenientVouchers(
        first: Int
        last: Int
        after: String
        before: String
        filter: [ConvenientFilter]
    ): ConvenientVoucherConnection!
        @deprecated(reason: "This field is hidden from introspection.")
}

"Pagination entry"
type NoticeEdge {
    "Node instance"
    node: Notice!
    "Pagination cursor"
    cursor: String!
}

"Pagination result"
type InputConnection {
    "Total number of entries that match the query"
    totalCount: Int!
    "Pagination entries returned for the current page"
    edges: [InputEdge!]!
    "Pagination metadata"
    pageInfo: PageInfo!
}

"Pagination result"
type VoucherConnection {
    "Total number of entries that match the query"
    totalCount: Int!
    "Pagination entries returned for the current page"
    edges: [VoucherEdge!]!
    "Pagination metadata"
    pageInfo: PageInfo!
}

"Informational statement that can be validated in the base layer blockchain"
type Notice {
    "Notice index within the context of the input that produced it"
    index: Int!
    "Input whose processing produced the notice"
    input: Input!
    "Notice data as a payload in Ethereum hex binary format, starting with '0x'"
    payload: String!
    "Proof object that allows this notice to be validated by the base layer blockchain"
    proof: Proof
}

"Pagination entry"
type ReportEdge {
    "Node instance"
    node: Report!
    "Pagination cursor"
    cursor: String!
}

"Pagination result"
type ReportConnection {
    "Total number of entries that match the query"
    totalCount: Int!
    "Pagination entries returned for the current page"
    edges: [ReportEdge!]!
    "Pagination metadata"
    pageInfo: PageInfo!
}

"Filter object to restrict results depending on input properties"
input InputFilter {
    "Filter only inputs with index lower than a given value"
    indexLowerThan: Int
    "Filter only inputs with index greater than a given value"
    indexGreaterThan: Int
}

scalar BigInt

"Pagination result"
type NoticeConnection {
    "Total number of entries that match the query"
    totalCount: Int!
    "Pagination entries returned for the current page"
    edges: [NoticeEdge!]!
    "Pagination metadata"
    pageInfo: PageInfo!
}

"Pagination entry"
type InputEdge {
    "Node instance"
    node: Input!
    "Pagination cursor"
    cursor: String!
}

"Page metadata for the cursor-based Connection pagination pattern"
type PageInfo {
    "Cursor pointing to the first entry of the page"
    startCursor: String
    "Cursor pointing to the last entry of the page"
    endCursor: String
    "Indicates if there are additional entries after the end curs"
    hasNextPage: Boolean!
    "Indicates if there are additional entries before the start curs"
    hasPreviousPage: Boolean!
}

"Application log or diagnostic information"
type Report {
    "Report index within the context of the input that produced it"
    index: Int!
    "Input whose processing produced the report"
    input: Input!
    "Report data as a payload in Ethereum hex binary format, starting with '0x'"
    payload: String!
}

"Pagination entry"
type VoucherEdge {
    "Node instance"
    node: Voucher!
    "Pagination cursor"
    cursor: String!
}

schema {
    query: Query
}

#----------------------#
#  Convenient Voucher  #
#----------------------#

type ConvenientVoucher {
    "Voucher index within the context of the input that produced it"
    index: Int!
    "Input whose processing produced the voucher"
    input: Input!
    "Transaction destination address in Ethereum hex binary format (20 bytes), starting with '0x'"
    destination: String!
    "Transaction payload in Ethereum hex binary format, starting with '0x'"
    payload: String!
    "Proof object that allows this voucher to be validated and executed on the base layer blockchain"
    proof: Proof
    "Executed"
    executed: Boolean
}

"Pagination result"
type ConvenientVoucherConnection {
    "Total number of entries that match the query"
    totalCount: Int!
    "Pagination entries returned for the current page"
    edges: [ConvenientVoucherEdge!]!
    "Pagination metadata"
    pageInfo: PageInfo!
}

"Pagination entry"
type ConvenientVoucherEdge {
    "Node instance"
    node: ConvenientVoucher!
    "Pagination cursor"
    cursor: String!
}

input AddressFilterInput {
    eq: String
    ne: String
    in: [String]
    nin: [String]

    # Logical operators
    and: [ConvenientFilter]
    or: [ConvenientFilter]
}

input BooleanFilterInput {
    eq: Boolean
    ne: Boolean

    # Logical operators
    and: [ConvenientFilter]
    or: [ConvenientFilter]
}

input ConvenientFilter {
    destination: AddressFilterInput
    executed: BooleanFilterInput
    # UserData: UserDataFilter

    # Logical operators
    and: [ConvenientFilter]
    or: [ConvenientFilter]
}

# input UserDataFilter {
#   # The field to apply the comparison operation on
#   field: String!

#   # Basic comparison operators
#   eq: String
#   ne: String
#   gt: String
#   gte: String
#   lt: String
#   lte: String

#   # Inclusion/exclusion operators
#   in: [String]
#   nin: [String]

#   # Logical operators
#   and: [ConvenientFilter]
#   or: [ConvenientFilter]
# }
